from pyglet.window import Window
from pyglet.app import run
from pyglet.shapes import Rectangle
from pyglet.graphics import Batch
from pyglet import clock

def hex_to_rgb(hex_color):
    return int(hex_color[1:3], 16), int(hex_color[3:5], 16), int(hex_color[5:7], 16), 255

class Renderer(Window):
    def __init__(self):
        super().__init__(2000, 900, "Solar System Simulation")
        self.batch = Batch()
        self.x = [3, 4, 2, 1, 5, 4.25, 2.50, 3.75, 5.25, 1.50, 5.75, 1.25, 4.50, 3.25, 2.70, 2.25, 3.50, 4.75, 1.75, 5.50]
        self.bars = []
        pink_rgb = (255, 192, 203, 255)  # RGB values for pink color

        for e, i in enumerate(self.x):
            self.bars.append(Rectangle(100 + e * 70, 100, 60, i * 80, color=pink_rgb, batch=self.batch))

    def on_update(self, deltatime):
        n = len(self.x)
        for i in range(n - 1):
            for j in range(0, n - i - 1):
                if self.x[j] > self.x[j + 1]:
                    self.x[j], self.x[j + 1] = self.x[j + 1], self.x[j]
                    self.bars = []
                    pink_rgb = (255, 192, 203, 255)  # RGB values for pink color
                    for e, i in enumerate(self.x):
                        self.bars.append(Rectangle(100 + e * 70, 100, 60, i * 80, color=pink_rgb, batch=self.batch))
                    return

    def on_draw(self):
        self.clear()
        self.batch.draw()

renderer = Renderer()
clock.schedule_interval(renderer.on_update, 0.5)
run()
